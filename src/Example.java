/*
Первая простая программа
После обсуждения объектно-ориентированного фундамента Java имеет
смысл рассмотреть несколько фактических программ на Java. Давайте начнем
с компиляции и запуска короткого примера программы, код которой показан
ниже. Вы увидите, что это требует чуть большего объема работы, чем может
показаться.
 */
public class Example {
    public static void main(String[] args) {
        System.out.println("Простая программа на языке Java.");
 /*
Несмотря на довольно небольшой размер программы Example . jаva, она
содержит несколько основных характеристик, присущих всем программам на
Java. Давайте займемся исследованием каждой части программы.
Программа начинается со следующих строк:
Простая программа на Java .
Назовите этот файл Example .java .
Строки представляют собой комментарий. Как и большинство других языков программирования, Java позволяет вводить примечания в файл с исходным
кодом программы. Компилятор игнорирует содержимое комментариев. На
самом деле комментарий описывает или объясняет работу программы любому, кто читает ее исходный код. В данном случае комментарий описывает программу и напоминает, что исходный файл должен называться Example . jаva.
Конечно, в реальных приложениях комментарии обычно объясняют, как работает какая-то часть программы или что делает конкретная функция. В Java поддерживаются три стиля комментариев. Комментарий в начале
программы называется многострочным. Комментарии такого типа должны начинаться с символов /* и заканчиваться символами * /. Все, что находится
между этими двумя парами символов, компилятор игнорирует. Как следует из названия, мноrострочный комментарий может занимать несколько строк.
Ниже показана следующая строка кода в программе:
class Example {
В строке с помощью ключевого слова class определяется новый класс.
Идентификатор Example является именем класса. Все определение класса,
включая всех его членов, будет находиться между открывающей фигурной
скобкой ( { ) и закрывающей фигурной скобкой ( } ). В данный момент не слишком беспокойтесь о деталях класса помимо того, что в Java вся активность
программы происходит внутри класса. Это одна из причин, по которой все
программы на Java (по крайней мере, слегка) объектно-ориентированы.
Следующая строка в программе содержит однострочный комментарий:
// Программа начинается с вызова main ( ) .
Вы видите второй тип комментариев, поддерживаемых в Java. Однострочный комментарий начинается с символов / / и простирается до конца строки. Как правило, программисты применяют многострочные комментарии для
длинных примечаний, а однострочные - для кратких построчных описаний.
Комментарии третьего типа, которые называются документирующими, обсуждается в разделе "Комментарии" далее в главе.
Вот следующая строка кода:
puЫic static void main ( Str:ing [] ar:gs) {

Данная строка начинает метод ma in (). Как объяснялось в предыдущем
комментарии, с этой строки программа начнет выполняться. Обычно программа на Java начинает выполнение с вызова rnain (). Полностью осознать
смысл каждой части строки пока невозможно, т.к. для этого нужно хорошо
понимать подход Java к инкапсуляции. Однако поскольку такая строка кода
присутствует в большинстве примеров в первой части книги, давайте кратко
рассмотрим каждую часть.
Ключевое слово puЫic представляет собой модификатор доступа, который позволяет программисту управлять видимостью чл енов класса. Когда
член класса предварен ключевым словом puЫic, доступ к нему может быть
получен из кода за пределами класса, где он объявлен. {Противоположностью
puЫic является ключевое слово private, которое предотвращает использование члена кодом, определенным вне класса.) В данном случае метод main ()
должен быть объявлен как puЫic, потому что при запуске программы его
потребуется вызывать в коде за пределами класса. Ключевое слово static
позволяет вызывать main () без создания конкретного экземпляра класса.
Причина в том, что main () вызывается машиной JVM до создания каких-либо объектов. Ключевое слово void просто сообщает компилятору, что rnain ()
не возвращает значение. Как вы увидите, методы также могут возвращать
значения. Если все это кажется немного запутанным, не переживайте - все
концепции будут подробно рассмотрены в последующих главах.
Как уже упоминалось, метод main ( ) вызывается при запуске приложения
Java. Имейте в виду, что язык Java чувствителен к регистру, а потому Main
отличается от main. Важно понимать, что компилятор Java будет компилировать классы, не содержащие метода main ( ) . Ноу java не будет возможности
запускать такие классы. Таким образом, если вы наберете Main вместо main,
то компилятор все равно скомпилирует вашу программу, но java сообщит об
ошибке, поскольку не сможет найти метод main ().
Любая информация, которую вам нужно передать методу, получается переменными, указанными в наборе круглых скобок после имени метода. Такие
переменные называются параметрами. Даже когда для метода не требуются параметры, вам все равно понадобится указать пустые круглые скобки.
В main () всего один параметр, хоть и сложный. Конструкция String [] a rgs
объявляет параметр по имени args, который представляет собой массив экземпляров класса String. (Массивы - это совокупности похожих объектов.)
Объекты типа String хранят строки символов. В данном случае args получает любые аргументы командной строки, присутствующие при выполнении
программы. В рассматриваемой программе такая информация не используется, но другие программы, показанные далее в этой книге, будут ее потреблять.
Последним символом в строке является {, который сигнализирует о начал е тела main (). Весь код, содержащийся в методе, будет находиться между
открывающей и закрывающей фигурными скобками метода.
Еще один момент: main () - это просто стартовая точка для вашей программы. Сложная программа будет иметь десятки классов, только один из
которых должен иметь метод main (), чтобы начать работу. Кроме того, для
некоторых типов программ метод main ( ) вообще не нужен. Тем не менее, для
большинства программ, приведенных в книге, метод main () обязателен.
Ниже показана следующая строка кода. Обратите внимание, что она расположена внутри main ( ) .
Systern.out . println ( "Пpocтaя программа на языке Java." ) ;
Здесь на экран выводится строка "Простая программа на языке Java ."
вместе с символом новой строки. Вывод в действительности осуществляется
встроенным методом println (). В данном случае метод print ln () отображает переданную ему строку. В дальнейшем вы увидите, что println () можно
применять и для отображения других типов информации. Строка начинается
с System. out. Хотя подробно объяснить это сейчас слишком сложно, вкратце
отметим, что System является предопределенным классом, обеспечивающим
доступ к системе, а out - выходным потоком, подключенным к консоли.
Вероятно, вы уже догадались, что консольный вывод (и ввод) нечасто используется в большинстве реальных приложений Java. Поскольку большинство современных вычислительных сред являются графическими по своей
природе, консольный ввод-вывод применяется в основном в простых утилитах, демонстрационных программах и серверном коде. Позже в книге вы
узнаете о других способах генерирования вывода с использованием Java. Но
пока мы продолжим применять методы консольного ввода-вывода.
Обратите внимание, что оператор println () завершается точкой с запятой. В Java точка с запятой присутствует в конце многих операторов. Как вы
увидите, точка с запятой - важная часть синтаксиса Java.
Первый символ } в программе заканчивает метод main (), а последний
символ } завершает определение класса Example.
  */

    }
}
