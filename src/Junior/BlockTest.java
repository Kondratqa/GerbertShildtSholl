package Junior;
/*
Использование блоков кода
Язык Java позволяет группировать два или более операторов в блоки кода,
также называемые кодовыми блоками. Для этого операторы помещаются между
открывающей и закрывающей фигурными скобками. После того, как блок кода
создан, он становится логической единицей, которую можно применять в любом месте, где разрешено использовать одиночный оператор. Скажем, блок может служить целью для операторов if и for. Возьмем следующий оператор i f:
i f ( x < y ) { Начало блока
х = у;
у= О;
} Конец блока


// конец блока
Если х меньше у, тогда выполнятся оба оператора внутри блока. Таким
образом, два оператора внутри блока образуют логическую единицу, где первый оператор не может быть выполнен без выполнения второго. Ключевой
момент здесь в том, что всякий раз, когда нужно логически с вязать два или
большее количество операторов, вы создаете блок.
Давайте рассмотрим еще один пример. В показанной далее программе
блок кода применятся в качестве цели цикла for.
 */
public class BlockTest {
    public static void main(String[] args) {
        int x, y;
        y = 20;

        for (x = 0; x < 10; x++) {
            System.out.println("Значение x: " + x);
            System.out.println("Значение x: " + y);
            y = y -2;
/*
Программа генерирует следующий вывод:
Значение х: О
Значение у: 20
Значение х: 1
Значение у: 18
Значение х: 2
Значение у: 16
Значение х: 3
Значение у: 14
Значение х: 4
Значение у: 12
Значение х: 5
Значение у: 10
Значение х: 6
Значение у: 8
Значение х: 7
Значение у: 6
Значение х: 8
Значение у: 4
Значение х: 9
Значение у: 2
В этом случае целью цикла for является блок кода, а не одиночный оператор. Соответственно на каждой итерации цикла будут выполняться три
оператора внутри блока, о чем, конечно же, свидетельствует вывод, генерируемый программой.
Позже в книге вы увидите, что блоки кода обладают дополнительными характеристиками и сценариями использования. Однако главная причина их
существования - создание логически неразрывных единиц кода.
 */
        }

    }

}

